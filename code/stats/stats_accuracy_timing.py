#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar  7 15:03:14 2024

Function will load the results summary generated by stats_summarize_accuracy_timing 
and perform repeated measures ANOVA to test for gorup differences between the 
two scripts learned (Braille v. Connected Braille). 

List of statistics that are performed in this function
- Accuracy: test session * group 
    * descriptive statistics (mean, SD) 
    * rmANOVA 
- Accuracy: training session * group 
    * descriptive statistics (mean, SD) 
    * rmANOVA 
- Time to write the answer in the test: test session * group
    * descriptive statistics (mean, SD) 
    * rmANOVA 
- Time to read during training: training session * group
    * descriptive statistics (mean, SD) 
    * rmANOVA 

@author: Filippo Cerpelloni
"""

import os
import pandas as pd
import pingouin as pg
from dfply import group_by, summarize

def stats_accuracy_timing(opt):
    
    # Load table
    summary = pd.DataFrame()
    summary = pd.read_csv(os.path.join(opt['dir']['stats'], 'VBT_results-accuracy-timing.csv'))
    
    ### ACCURACIES
    
    ## TEST
    # Re-shape table 
    teAccuracy = reshape_table(summary, ['ses-1_test-accuracy','ses-2_test-accuracy','ses-3_test-accuracy','ses-4_test-accuracy'])
    # Perform ANOVAs on accuracy
    teAccuracyDesc, teAccuracyAnova = get_stats(teAccuracy)
    save_stats(opt, teAccuracyDesc, 'accuracy', 'VBT_data-test_variable-accuracy_analysis-descriptive')
    save_stats(opt, teAccuracyAnova, 'accuracy', 'VBT_data-test_variable-accuracy_analysis-rmanova')

    
    ## TRAINING
    trAccuracy = reshape_table(summary, ['ses-2_train-accuracy','ses-3_train-accuracy','ses-4_train-accuracy'])
    trAccuracyDesc, trAccuracyAnova = get_stats(trAccuracy)
    save_stats(opt, trAccuracyDesc, 'accuracy', 'VBT_data-training_variable-accuracy_analysis-descriptive')
    save_stats(opt, trAccuracyAnova, 'accuracy', 'VBT_data-training_variable-accuracy_analysis-rmanova')

    
    
    ### TIMING
    
    ## TEST READING TIME
    # works as control, presentation is fixed at 6s
    # only perform descriptives
    teRead = reshape_table(summary, ['ses-1_test-reading','ses-2_test-reading','ses-3_test-reading','ses-4_test-reading'])
    teReadDesc = teRead.groupby(['script', 'day']).agg(n = ('target', 'count'),
                                                       mean = ('target', 'mean'),
                                                       std = ('target', 'std')).reset_index()
    save_stats(opt, teReadDesc, 'timing', 'VBT_data-test_variable-reading-time_analysis-descriptive')

    
    ## TEST WRITING TIME
    teWrite = reshape_table(summary, ['ses-1_test-writing','ses-2_test-writing','ses-3_test-writing','ses-4_test-writing'])
    teWriteDesc, teWriteAnova = get_stats(teWrite)
    save_stats(opt, teWriteDesc, 'timing', 'VBT_data-test_variable-writing-time_analysis-descriptive')
    save_stats(opt, teWriteAnova, 'timing', 'VBT_data-test_variable-writing-time_analysis-rmanova')

    
    ## TRAINING READING TIME
    trRead = reshape_table(summary, ['ses-2_train-reading','ses-3_train-reading','ses-4_train-reading'])
    trReadDesc, trReadAnova = get_stats(trRead)
    save_stats(opt, trReadDesc, 'timing', 'VBT_data-training_variable-reading-time_analysis-descriptive')
    save_stats(opt, trReadAnova, 'timing', 'VBT_data-training_variable-reading-time_analysis-rmanova')


    
### Subfunctions

# From a given selection of columns, extract a stats-friendly dataframe.
# Semi-static, requires 'subject' and 'script', and will reshape the list of columns into 'day'
def reshape_table(tableIn, relevantCols):

    # melt table to sub-selection
    tableOut = pd.melt(tableIn, id_vars = ['subject', 'script'], 
                           value_vars = relevantCols,
                           var_name = 'day', 
                           value_name = 'target')

    # Extract day number from 'day' column
    tableOut['day'] = tableOut['day'].str.extract(r'(\d)').astype(int)

    # Sort the dataframe
    tableOut.sort_values(by=['subject', 'script', 'day'], inplace = True)


    return tableOut


# From a (supposedly correct) table
# - extract descriptive statistics for group * day
# - perform repeated measures / mixed ANOVA
def get_stats(tableIn):
    
    # Descriptive statistics
    desc = tableIn.groupby(['script', 'day']).agg(n = ('target', 'count'),
                                                  mean = ('target', 'mean'),
                                                  std = ('target', 'std')).reset_index()
    
    # rmANOVA
    anova = pg.mixed_anova(dv = 'target', 
                           within = 'day', 
                           between = 'script', 
                           subject = 'subject',
                           data = tableIn)
    
    # Return values
    return desc, anova


# Save results to csv
# - renames 'target' variable to either 'accuracy' or 'timing'
def save_stats(opt, tableIn, newVarName, filename):
    
    # rename variable from filename
    tableIn = tableIn.rename(columns = {'target': newVarName})
    
    # construct the filename
    filename = filename + '.csv'
    
    # save result
    tableIn.to_csv(os.path.join(opt['dir']['results'], filename), index = False)
    
    




    